name: Build and Test C Project

on:
  pull_request:
    branches:
      - master

  push:
    branches:
      - master  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout main repository
      uses: actions/checkout@v3
      with:
        repository: codefresh-contrib/c-sample-app
        ref: master

    - name: Set up GCC
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Compile sources
      run: make

    - name: Zip compiled binaries
      if: github.event_name == 'push' 
      run: |
        mkdir artifacts
        cp src/foo-test libfoo.a libbar.a artifacts/
        cd artifacts
        zip my-app.zip *

    - name: Upload compiled binaries
      uses: actions/upload-artifact@v4
      if: github.event_name == 'push' 
      with:
        name: my-app-zip
        path: artifacts/my-app.zip
        
  test:
    runs-on: windows-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Install Cppcheck
      run: choco install cppcheck -y

    - name: Add Cppcheck to PATH
      run: |
        echo "C:\Program Files\Cppcheck" | Out-File -Append -Encoding ascii $env:GITHUB_PATH
        
    - name: Run Cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml . 2> cppcheck-report.xml

    - name: Upload Cppcheck Report
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-report
        path: cppcheck-report.xml
        
  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    - name: Create Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        TAG_NAME="v$(date +'%Y.%m.%d.%H%M%S')"  # Tag format: vYYYY.MM.DD.HHMMSS
        echo "Generated tag: $TAG_NAME"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag $TAG_NAME
        git push origin $TAG_NAME

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: my-app-zip
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Release ${{ env.TAG_NAME }}
        body: |
          Release created automatically by GitHub Actions.
        draft: false
        prerelease: false

    - name: Upload zipped artifact to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: my-app.zip
        asset_name: my-app.zip
        asset_content_type: application/zip
