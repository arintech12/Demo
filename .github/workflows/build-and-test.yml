name: Build and Test C Project

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout main repository
      uses: actions/checkout@v3
      with:
        repository: codefresh-contrib/c-sample-app
        ref: master

    - name: Set up GCC
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Compile sources
      run: make

    - name: Run tests
      run: |
         ls -al
         pwd
         make test

    - name: Zip compiled binaries
      run: |
        mkdir artifacts
        cp src/foo-test libfoo.a libbar.a artifacts/
        cd artifacts
        zip my-app.zip *

        # Create a new tag based on the commit SHA
        
    #- uses: actions/checkout@v3
    - name: Create Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        TAG_NAME="v$(date +'%Y.%m.%d.%H%M%S')"  # Tag format: vYYYY.MM.DD.HHMMSS
        echo "Generated tag: $TAG_NAME"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git remote -v
        git remote set-url origin https://$GITHUB_ACTOR:${{ secrets.GH_PERSONAL_TOKEN }}@github.com/codefresh-contrib/c-sample-app.git        
        git remote -v
        git tag $TAG_NAME
        git push origin $TAG_NAME

      # Create GitHub Release

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Release ${{ env.TAG_NAME }}
        body: |
          Release created automatically by GitHub Actions.
        draft: false
        prerelease: false
        
    - name: Find file
      run: |
         ls -al
         pwd
         
    - name: Upload zipped artifact to Release
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ github.token }}
      with:
       upload_url: ${{ steps.create_release.outputs.upload_url }}
       asset_path: artifacts/my-app.zip
       asset_name: my-app.zip
       asset_content_type: application/zip
